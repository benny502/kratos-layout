// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.21.12
// source: demo/v1/demo.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDemoExcel = "/demo.v1.Demo/Excel"
const OperationDemoI18N = "/demo.v1.Demo/I18N"

type DemoHTTPServer interface {
	Excel(context.Context, *ExcelRequest) (*ExcelReply, error)
	I18N(context.Context, *I18NRequest) (*I18NReply, error)
}

func RegisterDemoHTTPServer(s *http.Server, srv DemoHTTPServer) {
	r := s.Route("/")
	r.GET("/demo/i18n", _Demo_I18N0_HTTP_Handler(srv))
	r.GET("/demo/excel", _Demo_Excel0_HTTP_Handler(srv))
}

func _Demo_I18N0_HTTP_Handler(srv DemoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in I18NRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDemoI18N)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.I18N(ctx, req.(*I18NRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*I18NReply)
		return ctx.Result(200, reply)
	}
}

func _Demo_Excel0_HTTP_Handler(srv DemoHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExcelRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDemoExcel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Excel(ctx, req.(*ExcelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExcelReply)
		return ctx.Result(200, reply)
	}
}

type DemoHTTPClient interface {
	Excel(ctx context.Context, req *ExcelRequest, opts ...http.CallOption) (rsp *ExcelReply, err error)
	I18N(ctx context.Context, req *I18NRequest, opts ...http.CallOption) (rsp *I18NReply, err error)
}

type DemoHTTPClientImpl struct {
	cc *http.Client
}

func NewDemoHTTPClient(client *http.Client) DemoHTTPClient {
	return &DemoHTTPClientImpl{client}
}

func (c *DemoHTTPClientImpl) Excel(ctx context.Context, in *ExcelRequest, opts ...http.CallOption) (*ExcelReply, error) {
	var out ExcelReply
	pattern := "/demo/excel"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDemoExcel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *DemoHTTPClientImpl) I18N(ctx context.Context, in *I18NRequest, opts ...http.CallOption) (*I18NReply, error) {
	var out I18NReply
	pattern := "/demo/i18n"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDemoI18N))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
